name: Release Management

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      version:
        description: "Version to release (e.g., v1.2.3)"
        required: true
        type: string
      prerelease:
        description: "Mark as pre-release"
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  id-token: write
  pull-requests: read

env:
  PYTHON_VERSION: "3.10"
  PIPENV_VENV_IN_PROJECT: 1

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version information
        id: version
        env:
          EVENT_NAME: ${{ github.event_name }}
          INPUT_VERSION: ${{ github.event.inputs.version }}
          INPUT_PRERELEASE: ${{ github.event.inputs.prerelease }}
          REF_NAME: ${{ github.ref_name }}
        run: |
          if [ "$EVENT_NAME" = "workflow_dispatch" ]; then
            VERSION="$INPUT_VERSION"
            IS_PRERELEASE="$INPUT_PRERELEASE"
          else
            VERSION="$REF_NAME"
            # Check if version contains pre-release identifiers
            if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          
          # Validate version format
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
            echo "❌ Invalid version format: $VERSION"
            exit 1
          fi
          
          echo "✅ Version validated: $VERSION (prerelease: $IS_PRERELEASE)"

      - name: Generate changelog
        id: changelog
        run: |
          echo "Generating changelog for ${{ steps.version.outputs.version }}..."
          
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^1 2>/dev/null || echo "")
          
          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, including all commits"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            echo "Previous tag: $PREVIOUS_TAG"
            CHANGELOG=$(git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          fi
          
          {
            echo "changelog<<EOF"
            echo "$CHANGELOG"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Run pre-release tests
        run: |
          python -m pip install --upgrade pip pipenv
          pipenv install --dev
          pipenv run pytest test/ --tb=short
          pipenv run flake8 uploader.py test/
          pipenv run mypy uploader.py

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: validate-release
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip build twine

      - name: Build Python package
        run: |
          python -m build

      - name: Check package
        run: |
          python -m twine check dist/*

      - name: Create source archive
        run: |
          git archive --format=tar.gz --prefix=pvoutput-tariff-${{ needs.validate-release.outputs.version }}/ HEAD > dist/pvoutput-tariff-${{ needs.validate-release.outputs.version }}.tar.gz

      - name: Generate checksums
        run: |
          cd dist
          sha256sum * > checksums.txt
          cat checksums.txt

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: dist/

  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: validate-release
    permissions:
      contents: read
      packages: write
      id-token: write
    env:
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}}.{{minor}},value=${{ needs.validate-release.outputs.version }}
            type=semver,pattern={{major}},value=${{ needs.validate-release.outputs.version }},enable=${{ needs.validate-release.outputs.is-prerelease == 'false' }}
            type=raw,value=latest,enable=${{ needs.validate-release.outputs.is-prerelease == 'false' }}
          labels: |
            org.opencontainers.image.title=PVOutput Tariff Uploader
            org.opencontainers.image.description=Uploads electricity tariff prices to PVOutput
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ needs.validate-release.outputs.version }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true
          build-args: |
            VERSION=${{ needs.validate-release.outputs.version }}
            BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
            REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}

      - name: Install cosign
        uses: sigstore/cosign-installer@v3
        with:
          cosign-release: v2.2.3

      - name: Sign container image
        env:
          DIGEST: ${{ steps.build.outputs.digest }}
          TAGS: ${{ steps.meta.outputs.tags }}
        run: |
          images=""
          for tag in ${TAGS}; do
            images+="${tag}@${DIGEST} "
          done
          cosign sign --yes ${images}


  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-artifacts, build-docker]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: dist/

      - name: Generate release notes
        id: release-notes
        env:
          VERSION: ${{ needs.validate-release.outputs.version }}
          CHANGELOG: ${{ needs.validate-release.outputs.changelog }}
          REPOSITORY: ${{ github.repository }}
        run: |
          cat > release-notes.md << EOF
          ## 🚀 Release $VERSION
          
          ### What's Changed
          $CHANGELOG
          
          ### 📦 Installation
          
          #### Docker
          \`\`\`bash
          docker pull ghcr.io/$REPOSITORY:$VERSION
          \`\`\`
          
          #### From Source
          \`\`\`bash
          wget https://github.com/$REPOSITORY/archive/$VERSION.tar.gz
          tar -xzf $VERSION.tar.gz
          cd pvoutput-tariff-$VERSION
          pip install -r requirements.txt
          \`\`\`
          
          
          ### 📋 Full Changelog
          
          **Full Changelog**: https://github.com/$REPOSITORY/compare/v1.0.0...$VERSION
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          name: Release ${{ needs.validate-release.outputs.version }}
          body_path: release-notes.md
          files: |
            dist/*
          prerelease: ${{ needs.validate-release.outputs.is-prerelease == 'true' }}
          generate_release_notes: true
          make_latest: ${{ needs.validate-release.outputs.is-prerelease == 'false' }}

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: needs.validate-release.outputs.is-prerelease == 'false'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update README badges
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          
          # Update version badge in README
          if [ -f README.md ]; then
            sed -i "s/version-v[0-9]\+\.[0-9]\+\.[0-9]\+/version-$VERSION/g" README.md
            
            if git diff --quiet README.md; then
              echo "No README updates needed"
            else
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              git add README.md
              git commit -m "docs: update version badge to $VERSION"
              git push
            fi
          fi

      - name: Create next development branch
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          NEXT_VERSION=$(echo $VERSION | sed 's/v//' | awk -F. '{printf "v%d.%d.%d", $1, $2, $3+1}')
          
          echo "Creating development branch for $NEXT_VERSION"
          git checkout -b "develop/$NEXT_VERSION"
          git push origin "develop/$NEXT_VERSION"

  notify-success:
    name: Notify Release Success
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, post-release]
    if: success()
    steps:
      - name: Send success notification
        env:
          VERSION: ${{ needs.validate-release.outputs.version }}
          SERVER_URL: ${{ github.server_url }}
          REPOSITORY: ${{ github.repository }}
        run: |
          echo "🎉 Release $VERSION completed successfully!"
          echo "📦 GitHub Release: $SERVER_URL/$REPOSITORY/releases/tag/$VERSION"
          echo "🐳 Docker Image: ghcr.io/$REPOSITORY:$VERSION"

  notify-failure:
    name: Notify Release Failure
    runs-on: ubuntu-latest
    needs: [validate-release, build-artifacts, build-docker, create-release]
    if: failure()
    permissions:
      issues: write
    steps:
      - name: Create failure issue
        uses: actions/github-script@v7
        with:
          script: |
            const version = "${{ needs.validate-release.outputs.version }}";
            const title = `🚨 Release ${version} failed`;
            const body = `
            ## Release Failure
            
            The release workflow for ${version} has failed.
            
            **Failed Jobs:**
            - Validate Release: ${{ needs.validate-release.result }}
            - Build Artifacts: ${{ needs.build-artifacts.result }}
            - Build Docker: ${{ needs.build-docker.result }}
            - Create Release: ${{ needs.create-release.result }}
            
            **Action Required:**
            Please review the workflow logs and address any issues before retrying the release.
            
            **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            ---
            *This issue was automatically created by the release workflow.*
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['release', 'automated', 'bug']
            });