name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  security-events: write
  actions: read

env:
  PYTHON_VERSION: "3.10"
  PIPENV_VENV_IN_PROJECT: 1
  FORCE_COLOR: 1

jobs:
  setup:
    name: Setup and Cache
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=pipenv-${{ runner.os }}-${{ hashFiles('Pipfile.lock') }}" >> $GITHUB_OUTPUT

  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Cache pipenv virtualenv
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ needs.setup.outputs.cache-key }}-${{ env.PYTHON_VERSION }}
          restore-keys: |
            pipenv-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip pipenv
          pipenv install --dev

      - name: Lint with ruff
        run: |
          pipenv run ruff check --output-format=github .
        continue-on-error: true

      - name: Format check with ruff
        run: |
          pipenv run ruff format --check .

      - name: Lint with flake8
        run: |
          pipenv run flake8 uploader.py test/ --format='::error file=%(path)s,line=%(row)d,col=%(col)d::[flake8] %(code)s: %(text)s'

      - name: Check formatting with black
        run: |
          pipenv run black --check --diff uploader.py test/

      - name: Check import sorting with isort
        run: |
          pipenv run isort --check-only --diff uploader.py test/

      - name: Security linting with bandit
        run: |
          pipenv run bandit -r uploader.py -f json -o bandit-report.json
        continue-on-error: true

      - name: Upload bandit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-results
          path: bandit-report.json

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Cache pipenv virtualenv
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ needs.setup.outputs.cache-key }}-${{ env.PYTHON_VERSION }}
          restore-keys: |
            pipenv-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip pipenv
          pipenv install --dev

      - name: Type check with mypy
        run: |
          pipenv run mypy uploader.py --junit-xml=mypy-results.xml

      - name: Upload mypy results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mypy-results
          path: mypy-results.xml

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Cache pipenv virtualenv
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ needs.setup.outputs.cache-key }}-${{ env.PYTHON_VERSION }}
          restore-keys: |
            pipenv-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip pipenv
          pipenv install --dev

      - name: Run tests with pytest
        run: |
          pipenv run pytest test/ \
            --cov=uploader \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-report=html \
            --junit-xml=pytest-results.xml \
            --tb=short \
            -v

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            pytest-results.xml
            coverage.xml
            htmlcov/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: setup
    permissions:
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Cache pipenv virtualenv
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ needs.setup.outputs.cache-key }}-${{ env.PYTHON_VERSION }}
          restore-keys: |
            pipenv-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip pipenv
          pipenv install --dev

      - name: Run safety check
        run: |
          pipenv run safety check --json --output safety-report.json
        continue-on-error: true

      - name: Run semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: auto
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      - name: Upload security results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-results
          path: safety-report.json

  validate-config:
    name: Validate Configuration
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Cache pipenv virtualenv
        uses: actions/cache@v4
        with:
          path: .venv
          key: ${{ needs.setup.outputs.cache-key }}-${{ env.PYTHON_VERSION }}
          restore-keys: |
            pipenv-${{ runner.os }}-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip pipenv
          pipenv install --dev

      - name: Validate test configurations
        run: |
          pipenv run python -c "
          from config_schema import validate_config
          import yaml
          import os
          
          config_files = [
              'test/config.yaml',
              'test/config_august.yaml'
          ]
          
          for config_file in config_files:
              if os.path.exists(config_file):
                  print(f'Validating {config_file}...')
                  with open(config_file, 'r') as f:
                      config = yaml.safe_load(f)
                  validate_config(config)
                  print(f'‚úÖ {config_file} is valid')
              else:
                  print(f'‚ö†Ô∏è  {config_file} not found')
          "

  check-dependencies:
    name: Check Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install pipenv
        run: |
          python -m pip install --upgrade pip pipenv

      - name: Check Pipfile.lock is up to date
        run: |
          pipenv verify

      - name: Check for unused dependencies
        run: |
          pipenv graph

  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: [lint-and-format, type-check, test, security-scan, validate-config, check-dependencies]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "Lint and Format: ${{ needs.lint-and-format.result }}"
          echo "Type Check: ${{ needs.type-check.result }}"
          echo "Test: ${{ needs.test.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"
          echo "Validate Config: ${{ needs.validate-config.result }}"
          echo "Check Dependencies: ${{ needs.check-dependencies.result }}"
          
          if [[ "${{ needs.lint-and-format.result }}" == "failure" || 
                "${{ needs.type-check.result }}" == "failure" || 
                "${{ needs.test.result }}" == "failure" || 
                "${{ needs.validate-config.result }}" == "failure" || 
                "${{ needs.check-dependencies.result }}" == "failure" ]]; then
            echo "‚ùå One or more critical jobs failed"
            exit 1
          else
            echo "‚úÖ All jobs passed successfully"
          fi

      - name: Success notification
        if: success()
        run: |
          echo "üéâ All CI checks passed successfully!"