name: Security & Dependency Management

on:
  schedule:
    # Run daily at 6 AM UTC
    - cron: "0 6 * * *"
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  issues: write
  pull-requests: write

env:
  PYTHON_VERSION: "3.12"
  PIPENV_VENV_IN_PROJECT: 1

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip pipenv
          pipenv install --dev

      - name: Run safety check
        run: |
          pipenv run safety check --json --output safety-report.json --continue-on-error
        continue-on-error: true

      - name: Run pip-audit
        run: |
          pipenv run pip-audit --format=json --output=pip-audit-report.json
        continue-on-error: true

      - name: Upload safety results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: safety-scan-results
          path: safety-report.json

      - name: Upload pip-audit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-results
          path: pip-audit-report.json

  code-security-scan:
    name: Code Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip pipenv
          pipenv install --dev

      - name: Run bandit security linter
        run: |
          pipenv run bandit -r uploader.py -f sarif -o bandit-results.sarif
        continue-on-error: true

      - name: Upload bandit results to GitHub Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit-results.sarif

      - name: Run semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/python
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [python]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          deny-licenses: GPL-2.0, GPL-3.0

  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip pipenv pip-licenses
          pipenv install --dev

      - name: Check licenses
        run: |
          pipenv run pip-licenses --format=json --output-file=licenses.json
          pipenv run pip-licenses --format=csv --output-file=licenses.csv

      - name: Upload license information
        uses: actions/upload-artifact@v4
        with:
          name: license-information
          path: |
            licenses.json
            licenses.csv

  secrets-scan:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Build Docker image for scanning
        run: |
          docker build -t security-scan-image:latest .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: security-scan-image:latest
          format: sarif
          output: trivy-results.sarif

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif

      - name: Run Docker Scout
        uses: docker/scout-action@v1
        if: github.event_name != 'pull_request'
        with:
          command: cves
          image: security-scan-image:latest
          only-severities: critical,high
          exit-code: true

  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: pip

      - name: Install cyclonedx-bom
        run: |
          python -m pip install --upgrade pip cyclonedx-bom

      - name: Generate SBOM
        run: |
          pip install -r <(pipenv requirements)
          cyclonedx-py -o sbom.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: software-bill-of-materials
          path: sbom.json

  security-scorecard:
    name: Security Scorecard
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    permissions:
      security-events: write
      id-token: write
    steps:
      - name: Run analysis
        uses: ossf/scorecard-action@v2.3.1
        with:
          results_file: results.sarif
          results_format: sarif
          publish_results: true

      - name: Upload to code-scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  create-security-issue:
    name: Create Security Issue
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, container-security]
    if: failure() && github.event_name == 'schedule'
    permissions:
      issues: write
    steps:
      - name: Create security issue
        uses: actions/github-script@v7
        with:
          script: |
            const title = `🔒 Security scan detected issues - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## Security Scan Results
            
            One or more security scans have detected potential issues in the codebase.
            
            **Scan Results:**
            - Dependency Scan: ${{ needs.dependency-scan.result }}
            - Code Security: ${{ needs.code-security-scan.result }}
            - Container Security: ${{ needs.container-security.result }}
            
            **Action Required:**
            Please review the security scan results and address any high or critical severity issues.
            
            **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
            ---
            *This issue was automatically created by the security workflow.*
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'automated']
            });

  summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security-scan, codeql-analysis, license-check, secrets-scan, supply-chain-security]
    if: always()
    steps:
      - name: Generate security summary
        run: |
          echo "## 🔒 Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Scan Type | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Security | ${{ needs.code-security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| CodeQL Analysis | ${{ needs.codeql-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| License Check | ${{ needs.license-check.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Secrets Scan | ${{ needs.secrets-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Supply Chain | ${{ needs.supply-chain-security.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.dependency-scan.result }}" == "success" && 
                "${{ needs.code-security-scan.result }}" == "success" && 
                "${{ needs.codeql-analysis.result }}" == "success" && 
                "${{ needs.license-check.result }}" == "success" && 
                "${{ needs.secrets-scan.result }}" == "success" && 
                "${{ needs.supply-chain-security.result }}" == "success" ]]; then
            echo "✅ **All security scans passed successfully!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Some security scans have issues that need attention.**" >> $GITHUB_STEP_SUMMARY
          fi